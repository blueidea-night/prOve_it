[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nHTTP = Package.http.HTTP;\nHTTPInternals = Package.http.HTTPInternals;\nBusboy = Package['shammar13:busboy'].Busboy;\nPapa = Package['harrison:papa-parse'].Papa;\nAsync = Package['meteorhacks:async'].Async;\nRandom = Package.random.Random;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"server\":{\"api\":{\"api.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// server/api/api.js                                                                                           //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\nAPI = {                                                                                                        // 1\n                                                                                                               //\n  connection: function () {                                                                                    // 3\n    function connection(request) {                                                                             // 3\n      var getRequestContents = API.utility.getRequestContents(request);                                        // 4\n      return { data: getRequestContents };                                                                     // 5\n    }                                                                                                          //\n                                                                                                               //\n    return connection;                                                                                         //\n  }(),                                                                                                         //\n                                                                                                               //\n  handleRequest: function () {                                                                                 // 8\n    function handleRequest(context, method) {                                                                  // 8\n      // var csv = context.request.files[0]['contents'];                                                       //\n      // var rows = Papa.parse(csv).data;                                                                      //\n      // console.log(rows);                                                                                    //\n                                                                                                               //\n      var connection = API.connection(context.request);                                                        // 13\n      if (!connection.error) {                                                                                 // 14\n        var params = connection.data;                                                                          // 15\n        var files = context.request.files;                                                                     // 16\n                                                                                                               //\n        API.methods[method](context, params, files);                                                           // 19\n      } else {                                                                                                 //\n        API.utility.response(context, 401, connection);                                                        // 21\n      }                                                                                                        //\n    }                                                                                                          //\n                                                                                                               //\n    return handleRequest;                                                                                      //\n  }(),                                                                                                         //\n                                                                                                               //\n  methods: {                                                                                                   // 25\n    POST: function () {                                                                                        // 26\n      function POST(context, params, files) {                                                                  // 26\n        // Make sure that our request has data and that the data is valid.                                     //\n        var hasData = API.utility.hasData(params);                                                             // 28\n        // the validation does nothing at the moment                                                           //\n        // validData = API.utility.validate( connection.data, { \"a\": String, \"b\": String });                   //\n                                                                                                               //\n        if (hasData) {                                                                                         // 26\n                                                                                                               //\n          var csv = files[0]['contents'];                                                                      // 34\n          var result = Papa.parse(csv, {                                                                       // 35\n            error: function () {                                                                               // 36\n              function error(err, file, inputElem, reason) {                                                   // 36\n                // executed if an error occurs while loading the file,                                         //\n                // or if before callback aborted for some reason                                               //\n              }                                                                                                //\n                                                                                                               //\n              return error;                                                                                    //\n            }()                                                                                                //\n          });                                                                                                  //\n                                                                                                               //\n          var rows = result.data;                                                                              // 42\n          var errors = result.errors;                                                                          // 43\n          if (errors != false) {                                                                               // 44\n            console.log('ERRORS:');                                                                            // 45\n            console.log(errors);                                                                               // 46\n                                                                                                               //\n            var error_message = '';                                                                            // 48\n            for (var i = 0; i < errors.length; i++) {                                                          // 49\n              error_message = error_message + ' ' + errors[i].message;                                         // 50\n              console.log('message: `' + error_message + '`');                                                 // 51\n            }                                                                                                  //\n                                                                                                               //\n            API.utility.response(context, 422, { error: 422, message: \"CSV file isn't formatted correctly: \" + errors[0].message });\n          }                                                                                                    //\n                                                                                                               //\n          var upper_window = \"\";                                                                               // 57\n          var lower_window = \"\";                                                                               // 58\n          var upper_range = \"\";                                                                                // 59\n          var lower_range = \"\";                                                                                // 60\n          var range_name = \"\";                                                                                 // 61\n                                                                                                               //\n          var status_code = 200;                                                                               // 63\n          var other_vars = {};                                                                                 // 64\n                                                                                                               //\n          for (var key in meteorBabelHelpers.sanitizeForInObject(params)) {                                    // 66\n            if (key == \"upper_window\") {                                                                       // 67\n              upper_window = parseFloat(params['upper_window']);                                               // 68\n              continue;                                                                                        // 69\n            }                                                                                                  //\n            if (key == \"lower_window\") {                                                                       // 71\n              lower_window = parseFloat(params['lower_window']);                                               // 72\n              continue;                                                                                        // 73\n            }                                                                                                  //\n            var upperRegex = /upper_([a-zA-Z\\-]+)/g;                                                           // 75\n            var lowerRegex = /lower_([a-zA-Z\\-]+)/g;                                                           // 76\n            var match = upperRegex.exec(key);                                                                  // 77\n            if (match != null) {                                                                               // 78\n              upper_range = params[key];                                                                       // 79\n                                                                                                               //\n              range_name = match[1];                                                                           // 81\n              continue;                                                                                        // 82\n            }                                                                                                  //\n            match = lowerRegex.exec(key);                                                                      // 84\n            if (match != null) {                                                                               // 85\n              lower_range = params[key];                                                                       // 86\n              range_name = match[1];                                                                           // 87\n              continue;                                                                                        // 88\n            }                                                                                                  //\n            other_vars[key] = params[key];                                                                     // 90\n          }                                                                                                    //\n                                                                                                               //\n          API.utility.response(context, 200, {                                                                 // 93\n            upper_window: upper_window,                                                                        // 94\n            lower_window: lower_window,                                                                        // 95\n            upper_range: upper_range,                                                                          // 96\n            lower_range: lower_range,                                                                          // 97\n            range_name: range_name,                                                                            // 98\n            other_var: other_vars,                                                                             // 99\n            csv1_name: files[0]['fieldname'],                                                                  // 100\n            csv1: rows                                                                                         // 101\n          });                                                                                                  //\n        } else {                                                                                               //\n          API.utility.response(context, 404, { error: 404, message: \"No parameters found, dude.\" });           // 104\n        }                                                                                                      //\n      }                                                                                                        //\n                                                                                                               //\n      return POST;                                                                                             //\n    }()                                                                                                        //\n  },                                                                                                           //\n                                                                                                               //\n  utility: {                                                                                                   // 109\n    getRequestContents: function () {                                                                          // 110\n      function getRequestContents(request) {                                                                   // 110\n        return request.query;                                                                                  // 111\n      }                                                                                                        //\n                                                                                                               //\n      return getRequestContents;                                                                               //\n    }(),                                                                                                       //\n    hasData: function () {                                                                                     // 113\n      function hasData(data) {                                                                                 // 113\n        return Object.keys(data).length > 0 ? true : false;                                                    // 114\n      }                                                                                                        //\n                                                                                                               //\n      return hasData;                                                                                          //\n    }(),                                                                                                       //\n    response: function () {                                                                                    // 116\n      function response(context, statusCode, data) {                                                           // 116\n        context.response.setHeader('Content-Type', 'application/json');                                        // 117\n        context.response.statusCode = statusCode;                                                              // 118\n        context.response.end(JSON.stringify(data));                                                            // 119\n      }                                                                                                        //\n                                                                                                               //\n      return response;                                                                                         //\n    }(),                                                                                                       //\n    validate: function () {                                                                                    // 121\n      function validate(data, pattern) {                                                                       // 121\n        return true;                                                                                           // 122\n        return Match.test(data, pattern);                                                                      // 123\n      }                                                                                                        //\n                                                                                                               //\n      return validate;                                                                                         //\n    }()                                                                                                        //\n  }                                                                                                            //\n};                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"routers.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// server/api/routers.js                                                                                       //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\nif (Meteor.isServer) {                                                                                         // 1\n  var fs = Npm.require(\"fs\"),                                                                                  // 2\n      os = Npm.require(\"os\"),                                                                                  //\n      path = Npm.require(\"path\");                                                                              //\n                                                                                                               //\n  Router.onBeforeAction(function (req, res, next) {                                                            // 6\n    var files = []; // Store a file and then pass it to the request.                                           // 7\n                                                                                                               //\n    if (req.method === \"POST\") {                                                                               // 6\n      var busboy = new Busboy({                                                                                // 10\n        headers: req.headers                                                                                   // 11\n      });                                                                                                      //\n      busboy.on(\"file\", function (fieldname, file, filename, encoding, mimetype) {                             // 13\n        // var saveTo = path.join(os.tmpDir(), filename);                                                      //\n        // var saveTo = path.join(process.cwd()+ \"/tmp/\", filename);                                           //\n        // var token = Random.id( 10 );                                                                        //\n        // req.token = token;                                                                                  //\n        // var saveTo = path.join(process.env.PWD, \"private\", filename);                                       //\n        var fileSizeBytes = 0;                                                                                 // 19\n        var contents = '';                                                                                     // 20\n                                                                                                               //\n        // file.pipe(fs.createWriteStream(saveTo));                                                            //\n        // var string = Assets.getText(filename);                                                              //\n                                                                                                               //\n        file.on(\"data\", function (data) {                                                                      // 13\n          fileSizeBytes = fileSizeBytes + data.length;                                                         // 26\n          contents += data;                                                                                    // 27\n        });                                                                                                    //\n                                                                                                               //\n        file.on('end', function () {                                                                           // 30\n          // console.log(datas);                                                                               //\n          files.push({                                                                                         // 32\n            fieldname: fieldname,                                                                              // 33\n            originalFilename: filename,                                                                        // 34\n            contents: contents,                                                                                // 35\n            size: fileSizeBytes                                                                                // 36\n          });                                                                                                  //\n        });                                                                                                    //\n      });                                                                                                      //\n      busboy.on(\"finish\", function () {                                                                        // 40\n        // Pass the file on to the request                                                                     //\n        // console.log(files);                                                                                 //\n        req.files = files;                                                                                     // 43\n        next();                                                                                                // 44\n      });                                                                                                      //\n      // Pass request to busboy                                                                                //\n      req.pipe(busboy);                                                                                        // 9\n    } else {                                                                                                   //\n      next();                                                                                                  // 49\n    }                                                                                                          //\n  });                                                                                                          //\n}                                                                                                              //\n                                                                                                               //\nRouter.route('/api/v1/event-study', function () {                                                              // 54\n                                                                                                               //\n  this.response.setHeader('Access-Control-Allow-Origin', '*');                                                 // 56\n                                                                                                               //\n  if (this.request.method === \"OPTIONS\") {                                                                     // 58\n    this.response.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n    this.response.setHeader('Access-Control-Allow-Methods', 'POST, PUT, GET, DELETE, OPTIONS');                // 60\n    this.response.end('Set OPTIONS.');                                                                         // 61\n  } else {                                                                                                     //\n    API.handleRequest(this, this.request.method);                                                              // 63\n  }                                                                                                            //\n}, { where: 'server' });                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"main.js\":[\"meteor/meteor\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// server/main.js                                                                                              //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\nvar _meteor = require('meteor/meteor');                                                                        // 1\n                                                                                                               //\n_meteor.Meteor.startup(function () {                                                                           // 3\n  // code to run on server at startup                                                                          //\n});                                                                                                            //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./server/api/api.js\");\nrequire(\"./server/api/routers.js\");\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/server/api/api.js","/server/api/routers.js","/server/main.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["API = {\n\n  connection: function( request ) {\n    var getRequestContents = API.utility.getRequestContents( request );\n    return { data: getRequestContents };\n  },\n\n  handleRequest: function( context, method ) {\n    // var csv = context.request.files[0]['contents'];\n    // var rows = Papa.parse(csv).data;\n    // console.log(rows);\n\n    var connection = API.connection( context.request );\n    if ( !connection.error ) {\n      var params = connection.data;\n      var files  = context.request.files;\n\n\n      API.methods[ method ]( context, params, files );\n    } else {\n      API.utility.response( context, 401, connection );\n    }\n  },\n\n  methods: {\n    POST: function( context, params, files ) {\n      // Make sure that our request has data and that the data is valid.\n      var hasData   = API.utility.hasData( params );\n          // the validation does nothing at the moment\n          // validData = API.utility.validate( connection.data, { \"a\": String, \"b\": String });\n\n      if ( hasData ) {\n\n        var csv = files[0]['contents'];\n        var result = Papa.parse(csv, {\n          error: function(err, file, inputElem, reason) {\n            // executed if an error occurs while loading the file,\n            // or if before callback aborted for some reason\n          }\n        });\n\n        var rows = result.data;\n        var errors = result.errors;\n        if (errors != false) {\n          console.log('ERRORS:');\n          console.log(errors);\n\n          var error_message = '';\n          for (var i=0; i<errors.length; i++) {\n            error_message =  error_message + ' ' + errors[i].message;\n            console.log('message: `' + error_message + '`');\n          }\n\n          API.utility.response( context, 422, { error: 422, message: \"CSV file isn't formatted correctly: \" + errors[0].message } );\n        }\n\n        var upper_window = \"\";\n        var lower_window = \"\";\n        var upper_range = \"\";\n        var lower_range = \"\";\n        var range_name = \"\";\n\n        var status_code = 200;\n        var other_vars = {};\n\n        for (var key in params) {\n          if (key == \"upper_window\"){\n            upper_window = parseFloat(params['upper_window']);\n            continue;\n          }\n          if (key == \"lower_window\"){\n            lower_window = parseFloat(params['lower_window']);\n            continue;\n          }\n          var upperRegex = /upper_([a-zA-Z\\-]+)/g;\n          var lowerRegex = /lower_([a-zA-Z\\-]+)/g;\n          var match = upperRegex.exec(key);\n          if (match != null) {\n            upper_range = params[key];\n\n            range_name = match[1];\n            continue;\n          }\n          match = lowerRegex.exec(key);\n          if (match != null) {\n            lower_range = params[key];\n            range_name = match[1];\n            continue;\n          }\n          other_vars[key] = params[key];\n        }\n\n        API.utility.response( context, 200, {\n          upper_window : upper_window,\n          lower_window : lower_window,\n          upper_range  : upper_range,\n          lower_range  : lower_range,\n          range_name   : range_name,\n          other_var    : other_vars,\n          csv1_name    : files[0]['fieldname'],\n          csv1         : rows,\n        });\n      } else {\n        API.utility.response( context, 404, { error: 404, message: \"No parameters found, dude.\" } );\n      }\n    },\n  },\n\n  utility: {\n    getRequestContents: function( request ) {\n      return request.query;\n    },\n    hasData: function( data ) {\n      return Object.keys( data ).length > 0 ? true : false;\n    },\n    response: function( context, statusCode, data ) {\n      context.response.setHeader( 'Content-Type', 'application/json' );\n      context.response.statusCode = statusCode;\n      context.response.end( JSON.stringify( data) );\n    },\n    validate: function( data, pattern ) {\n      return true;\n      return Match.test( data, pattern );\n    }\n  }\n};\n","if (Meteor.isServer) {\n  var fs = Npm.require(\"fs\"),\n      os = Npm.require(\"os\"),\n      path = Npm.require(\"path\");\n\n  Router.onBeforeAction(function(req, res, next) {\n    var files = []; // Store a file and then pass it to the request.\n\n    if (req.method === \"POST\") {\n      var busboy = new Busboy({\n          headers: req.headers\n      });\n      busboy.on(\"file\", function(fieldname, file, filename, encoding, mimetype) {\n        // var saveTo = path.join(os.tmpDir(), filename);\n        // var saveTo = path.join(process.cwd()+ \"/tmp/\", filename);\n        // var token = Random.id( 10 );\n        // req.token = token;\n        // var saveTo = path.join(process.env.PWD, \"private\", filename);\n        var fileSizeBytes = 0;\n        var contents = '';\n\n        // file.pipe(fs.createWriteStream(saveTo));\n        // var string = Assets.getText(filename);\n\n        file.on(\"data\", function(data) {\n          fileSizeBytes = fileSizeBytes + data.length;\n          contents += data;\n        });\n\n        file.on('end', function() {\n          // console.log(datas);\n          files.push({\n            fieldname: fieldname,\n            originalFilename: filename,\n            contents : contents,\n            size: fileSizeBytes,\n          });\n        });\n      });\n      busboy.on(\"finish\", function() {\n        // Pass the file on to the request\n        // console.log(files);\n        req.files = files;\n        next();\n      });\n      // Pass request to busboy\n      req.pipe(busboy);\n    } else {\n      next();\n    }\n  });\n}\n\nRouter.route( '/api/v1/event-study', function() {\n\n  this.response.setHeader( 'Access-Control-Allow-Origin', '*' );\n\n  if ( this.request.method === \"OPTIONS\" ) {\n    this.response.setHeader( 'Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept' );\n    this.response.setHeader( 'Access-Control-Allow-Methods', 'POST, PUT, GET, DELETE, OPTIONS' );\n    this.response.end( 'Set OPTIONS.' );\n  } else {\n    API.handleRequest( this, this.request.method);\n  }\n}, { where: 'server' } );\n","import { Meteor } from 'meteor/meteor';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]