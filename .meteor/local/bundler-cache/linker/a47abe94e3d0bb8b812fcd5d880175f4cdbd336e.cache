[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nHTTP = Package.http.HTTP;\nHTTPInternals = Package.http.HTTPInternals;\nBusboy = Package['shammar13:busboy'].Busboy;\nPapa = Package['harrison:papa-parse'].Papa;\nAsync = Package['meteorhacks:async'].Async;\nRandom = Package.random.Random;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"server\":{\"api\":{\"api.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// server/api/api.js                                                                                              //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nAPI = {                                                                                                           // 1\n                                                                                                                  //\n  connection: function () {                                                                                       // 3\n    function connection(request) {                                                                                // 3\n      var getRequestContents = API.utility.getRequestContents(request);                                           // 4\n      return { data: getRequestContents };                                                                        // 5\n    }                                                                                                             //\n                                                                                                                  //\n    return connection;                                                                                            //\n  }(),                                                                                                            //\n                                                                                                                  //\n  handleRequest: function () {                                                                                    // 8\n    function handleRequest(context, method) {                                                                     // 8\n      // var csv = context.request.files[0]['contents'];                                                          //\n      // var rows = Papa.parse(csv).data;                                                                         //\n      // console.log(rows);                                                                                       //\n                                                                                                                  //\n      var connection = API.connection(context.request);                                                           // 13\n      if (!connection.error) {                                                                                    // 14\n        var params = connection.data;                                                                             // 15\n        var files = context.request.files;                                                                        // 16\n                                                                                                                  //\n        API.methods[method](context, params, files);                                                              // 19\n      } else {                                                                                                    //\n        API.utility.response(context, 401, connection);                                                           // 21\n      }                                                                                                           //\n    }                                                                                                             //\n                                                                                                                  //\n    return handleRequest;                                                                                         //\n  }(),                                                                                                            //\n                                                                                                                  //\n  methods: {                                                                                                      // 25\n    POST: function () {                                                                                           // 26\n      function POST(context, params, files) {                                                                     // 26\n        var upper_window = \"\";                                                                                    // 27\n        var lower_window = \"\";                                                                                    // 28\n        var upper_range = \"\";                                                                                     // 29\n        var lower_range = \"\";                                                                                     // 30\n        var range_name = \"\";                                                                                      // 31\n                                                                                                                  //\n        var status_code = 200;                                                                                    // 33\n        var other_vars = {};                                                                                      // 34\n                                                                                                                  //\n        for (var key in meteorBabelHelpers.sanitizeForInObject(params)) {                                         // 36\n          if (key == \"upper_window\") {                                                                            // 37\n            upper_window = params['upper_window'];                                                                // 38\n            continue;                                                                                             // 39\n          }                                                                                                       //\n          if (key == \"lower_window\") {                                                                            // 41\n            lower_window = params['lower_window'];                                                                // 42\n            continue;                                                                                             // 43\n          }                                                                                                       //\n          var upperRegex = /upper_([a-zA-Z\\-]+)/g;                                                                // 45\n          var lowerRegex = /lower_([a-zA-Z\\-]+)/g;                                                                // 46\n          var match = upperRegex.exec(key);                                                                       // 47\n          if (match != null) {                                                                                    // 48\n            upper_range = params[key];                                                                            // 49\n            var match_value = match[1];                                                                           // 50\n            console.log(match_value);                                                                             // 51\n            if (API.utility.match_range_name(range_name, match_value)) {                                          // 52\n              range_name = match_value;                                                                           // 53\n            }                                                                                                     //\n            continue;                                                                                             // 55\n          }                                                                                                       //\n          match = lowerRegex.exec(key);                                                                           // 57\n          if (match != null) {                                                                                    // 58\n            lower_range = params[key];                                                                            // 59\n            //            lower_range = parseFloat.(params[key]);                                                 //\n            var match_value = match[1];                                                                           // 58\n            if (API.utility.match_range_name(range_name, match_value)) {                                          // 62\n              range_name = match_value;                                                                           // 63\n            }                                                                                                     //\n            continue;                                                                                             // 65\n          }                                                                                                       //\n          other_vars[key] = params[key];                                                                          // 67\n        }                                                                                                         //\n                                                                                                                  //\n        // Make sure that our request has data and that the data is valid.                                        //\n        var requestOK = API.utility.validateRequest(upper_window, lower_window, upper_range, lower_range, range_name, files);\n                                                                                                                  //\n        if (requestOK) {                                                                                          // 73\n          upper_window = parseFloat(upper_window);                                                                // 74\n          lower_window = parseFloat(lower_window);                                                                // 75\n          upper_range = parseFloat(upper_range);                                                                  // 76\n          lower_range = parseFloat(lower_range);                                                                  // 77\n                                                                                                                  //\n          for (var id in meteorBabelHelpers.sanitizeForInObject(files)) {                                         // 79\n            var parseObject = Papa.parse(files[id]['contents']);                                                  // 80\n            files[id]['json'] = parseObject.data;                                                                 // 81\n            files[id]['errors'] = parseObject.errors;                                                             // 82\n                                                                                                                  //\n            console.log(parseObject.errors);                                                                      // 84\n                                                                                                                  //\n            if (files[id]['errors']) {                                                                            // 86\n              API.utility.response(context, 422, { error: 422, message: \"CSV file isn't formatted correctly.\" });\n            }                                                                                                     //\n          }                                                                                                       //\n                                                                                                                  //\n          // the validation does nothing at the moment                                                            //\n          // validData = API.utility.validate( connection.data, { \"a\": String, \"b\": String });                    //\n                                                                                                                  //\n          API.utility.response(context, status_code, {                                                            // 73\n            upper_window: upper_window,                                                                           // 95\n            lower_window: lower_window,                                                                           // 96\n            upper_range: upper_range,                                                                             // 97\n            lower_range: lower_range,                                                                             // 98\n            range_name: range_name,                                                                               // 99\n            other_var: other_vars,                                                                                // 100\n            csv1_name: files[0]['fieldname'],                                                                     // 101\n            csv1: files[0]['json']                                                                                // 102\n          });                                                                                                     //\n        } else {                                                                                                  //\n          API.utility.response(context, 404, { error: 404, message: \"Invalid Request, dude.\" });                  // 105\n        }                                                                                                         //\n      }                                                                                                           //\n                                                                                                                  //\n      return POST;                                                                                                //\n    }()                                                                                                           //\n  },                                                                                                              //\n                                                                                                                  //\n  utility: {                                                                                                      // 110\n    getRequestContents: function () {                                                                             // 111\n      function getRequestContents(request) {                                                                      // 111\n        return request.query;                                                                                     // 112\n      }                                                                                                           //\n                                                                                                                  //\n      return getRequestContents;                                                                                  //\n    }(),                                                                                                          //\n    hasData: function () {                                                                                        // 114\n      function hasData(data) {                                                                                    // 114\n        return Object.keys(data).length > 0 ? true : false;                                                       // 115\n      }                                                                                                           //\n                                                                                                                  //\n      return hasData;                                                                                             //\n    }(),                                                                                                          //\n    response: function () {                                                                                       // 117\n      function response(context, statusCode, data) {                                                              // 117\n        context.response.setHeader('Content-Type', 'application/json');                                           // 118\n        context.response.statusCode = statusCode;                                                                 // 119\n        context.response.end(JSON.stringify(data));                                                               // 120\n      }                                                                                                           //\n                                                                                                                  //\n      return response;                                                                                            //\n    }(),                                                                                                          //\n    validate: function () {                                                                                       // 122\n      function validate(data, pattern) {                                                                          // 122\n        return Match.test(data, pattern);                                                                         // 123\n      }                                                                                                           //\n                                                                                                                  //\n      return validate;                                                                                            //\n    }(),                                                                                                          //\n    validateRequest: function () {                                                                                // 125\n      function validateRequest(upper_window, lower_window, upper_range, lower_range, range_name, files) {         // 125\n        return files.length == 2 && isNumeric(upper_window) && isNumeric(lower_window) && isNumeric(upper_range) && isNumeric(lower_range) && range_name != \"\" && parseFloat(upper_window) <= parseFloat(lower_window);\n      }                                                                                                           //\n                                                                                                                  //\n      return validateRequest;                                                                                     //\n    }(),                                                                                                          //\n    match_range_name: function () {                                                                               // 134\n      function match_range_name(range_name, matching_range_name) {                                                // 134\n        if (range_name == \"\") {                                                                                   // 135\n          return true;                                                                                            // 136\n        } else if (range_name == matching_range_name) {                                                           //\n          return true;                                                                                            // 138\n        } else {                                                                                                  //\n          return false;                                                                                           // 140\n        }                                                                                                         //\n      }                                                                                                           //\n                                                                                                                  //\n      return match_range_name;                                                                                    //\n    }()                                                                                                           //\n  }                                                                                                               //\n};                                                                                                                //\n                                                                                                                  //\nfunction isNumeric(num) {                                                                                         // 147\n  return !isNaN(num);                                                                                             // 148\n}                                                                                                                 //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"routers.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// server/api/routers.js                                                                                          //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nif (Meteor.isServer) {                                                                                            // 1\n  var fs = Npm.require(\"fs\"),                                                                                     // 2\n      os = Npm.require(\"os\"),                                                                                     //\n      path = Npm.require(\"path\");                                                                                 //\n                                                                                                                  //\n  Router.onBeforeAction(function (req, res, next) {                                                               // 6\n    //    console.log(req.headers);                                                                               //\n    var files = []; // Store a file and then pass it to the request.                                              // 8\n                                                                                                                  //\n    if (req.method === \"POST\" && parseInt(req.headers['content-length']) > 0) {                                   // 6\n      var busboy = new Busboy({                                                                                   // 11\n        headers: req.headers                                                                                      // 12\n      });                                                                                                         //\n      busboy.on(\"file\", function (fieldname, file, filename, encoding, mimetype) {                                // 14\n        // var saveTo = path.join(os.tmpDir(), filename);                                                         //\n        // var saveTo = path.join(process.cwd()+ \"/tmp/\", filename);                                              //\n        // var token = Random.id( 10 );                                                                           //\n        // req.token = token;                                                                                     //\n        // var saveTo = path.join(process.env.PWD, \"private\", filename);                                          //\n        var fileSizeBytes = 0;                                                                                    // 20\n        var contents = '';                                                                                        // 21\n                                                                                                                  //\n        // file.pipe(fs.createWriteStream(saveTo));                                                               //\n        // var string = Assets.getText(filename);                                                                 //\n                                                                                                                  //\n        file.on(\"data\", function (data) {                                                                         // 14\n          fileSizeBytes = fileSizeBytes + data.length;                                                            // 27\n          contents += data;                                                                                       // 28\n        });                                                                                                       //\n                                                                                                                  //\n        file.on('end', function () {                                                                              // 31\n          // console.log(datas);                                                                                  //\n          files.push({                                                                                            // 33\n            fieldname: fieldname,                                                                                 // 34\n            originalFilename: filename,                                                                           // 35\n            contents: contents,                                                                                   // 36\n            size: fileSizeBytes                                                                                   // 37\n          });                                                                                                     //\n        });                                                                                                       //\n      });                                                                                                         //\n      busboy.on(\"finish\", function () {                                                                           // 41\n        // Pass the file on to the request                                                                        //\n        // console.log(files);                                                                                    //\n        req.files = files;                                                                                        // 44\n        next();                                                                                                   // 45\n      });                                                                                                         //\n      // Pass request to busboy                                                                                   //\n      req.pipe(busboy);                                                                                           // 10\n    } else {                                                                                                      //\n      next();                                                                                                     // 50\n    }                                                                                                             //\n  });                                                                                                             //\n}                                                                                                                 //\n                                                                                                                  //\nRouter.route('/api/v1/event-study', function () {                                                                 // 55\n                                                                                                                  //\n  this.response.setHeader('Access-Control-Allow-Origin', '*');                                                    // 57\n                                                                                                                  //\n  if (this.request.method === \"OPTIONS\") {                                                                        // 59\n    this.response.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');    // 60\n    this.response.setHeader('Access-Control-Allow-Methods', 'POST, PUT, GET, DELETE, OPTIONS');                   // 61\n    this.response.end('Set OPTIONS.');                                                                            // 62\n  } else {                                                                                                        //\n    API.handleRequest(this, this.request.method);                                                                 // 64\n  }                                                                                                               //\n}, { where: 'server' });                                                                                          //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"main.js\":[\"meteor/meteor\",function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// server/main.js                                                                                                 //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nvar _meteor = require('meteor/meteor');                                                                           // 1\n                                                                                                                  //\n_meteor.Meteor.startup(function () {                                                                              // 3\n  // code to run on server at startup                                                                             //\n});                                                                                                               //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./server/api/api.js\");\nrequire(\"./server/api/routers.js\");\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/server/api/api.js","/server/api/routers.js","/server/main.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["API = {\n\n  connection: function( request ) {\n    var getRequestContents = API.utility.getRequestContents( request );\n    return { data: getRequestContents };\n  },\n\n  handleRequest: function( context, method ) {\n    // var csv = context.request.files[0]['contents'];\n    // var rows = Papa.parse(csv).data;\n    // console.log(rows);\n\n    var connection = API.connection( context.request );\n    if ( !connection.error ) {\n      var params = connection.data;\n      var files  = context.request.files;\n\n\n      API.methods[ method ]( context, params, files );\n    } else {\n      API.utility.response( context, 401, connection );\n    }\n  },\n\n  methods: {\n    POST: function( context, params, files ) {\n      var upper_window = \"\";\n      var lower_window = \"\";\n      var upper_range = \"\";\n      var lower_range = \"\";\n      var range_name = \"\";\n\n      var status_code = 200;\n      var other_vars = {};\n\n      for (var key in params) {\n        if (key == \"upper_window\"){\n          upper_window = params['upper_window'];\n          continue;\n        }\n        if (key == \"lower_window\"){\n          lower_window = params['lower_window'];\n          continue;\n        }\n        var upperRegex = /upper_([a-zA-Z\\-]+)/g;\n        var lowerRegex = /lower_([a-zA-Z\\-]+)/g;\n        var match = upperRegex.exec(key);\n        if (match != null) {\n          upper_range = params[key];\n          var match_value = match[1];\n          console.log(match_value);\n          if (API.utility.match_range_name(range_name, match_value)){\n            range_name = match_value;\n          }\n          continue;\n        }\n        match = lowerRegex.exec(key);\n        if (match != null) {\n          lower_range = params[key];\n//            lower_range = parseFloat.(params[key]);\n          var match_value = match[1];\n          if (API.utility.match_range_name(range_name, match_value)){\n            range_name = match_value;\n          }\n          continue;\n        }\n        other_vars[key] = params[key];\n      }\n      \n      // Make sure that our request has data and that the data is valid.\n      var requestOK   = API.utility.validateRequest( upper_window , lower_window, upper_range, lower_range, range_name, files);\n\n      if ( requestOK ) {\n        upper_window = parseFloat(upper_window);\n        lower_window = parseFloat(lower_window);\n        upper_range = parseFloat(upper_range);\n        lower_range = parseFloat(lower_range);\n        \n        for (var id in files) {\n          var parseObject = Papa.parse(files[id]['contents'])\n          files[id]['json'] = parseObject.data;\n          files[id]['errors'] = parseObject.errors;\n\n          console.log(parseObject.errors);\n\n          if (files[id]['errors']) {\n            API.utility.response( context, 422, { error: 422, message: \"CSV file isn't formatted correctly.\" } );\n          }\n        }\n\n          // the validation does nothing at the moment\n          // validData = API.utility.validate( connection.data, { \"a\": String, \"b\": String });\n\n        API.utility.response( context, status_code, {\n          upper_window : upper_window,\n          lower_window : lower_window,\n          upper_range  : upper_range,\n          lower_range  : lower_range,\n          range_name   : range_name,\n          other_var    : other_vars,\n          csv1_name    : files[0]['fieldname'],\n          csv1         : files[0]['json'],\n        });\n      } else {\n        API.utility.response( context, 404, { error: 404, message: \"Invalid Request, dude.\" } );\n      }\n    },\n  },\n\n  utility: {\n    getRequestContents: function( request ) {\n      return request.query;\n    },\n    hasData: function( data ) {\n      return Object.keys( data ).length > 0 ? true : false;\n    },\n    response: function( context, statusCode, data ) {\n      context.response.setHeader( 'Content-Type', 'application/json' );\n      context.response.statusCode = statusCode;\n      context.response.end( JSON.stringify( data) );\n    },\n    validate: function( data, pattern ) {\n      return Match.test( data, pattern );\n    },\n    validateRequest: function ( upper_window , lower_window, upper_range, lower_range, range_name, files ) {\n      return files.length == 2 &&\n        isNumeric(upper_window) &&\n        isNumeric(lower_window) &&\n        isNumeric(upper_range) &&\n        isNumeric(lower_range) &&\n        range_name != \"\" &&\n        parseFloat(upper_window) <= parseFloat(lower_window);\n    },\n    match_range_name: function (range_name, matching_range_name) {\n      if (range_name == \"\") {\n        return true;\n      } else if (range_name == matching_range_name) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n  }\n};\n\n\nfunction isNumeric(num) {\n    return !isNaN(num)\n}\n\n","if (Meteor.isServer) {\n  var fs = Npm.require(\"fs\"),\n      os = Npm.require(\"os\"),\n      path = Npm.require(\"path\");\n\n  Router.onBeforeAction(function(req, res, next) {\n//    console.log(req.headers);\n    var files = []; // Store a file and then pass it to the request.\n\n    if (req.method === \"POST\" && parseInt(req.headers['content-length']) > 0) {\n      var busboy = new Busboy({\n          headers: req.headers\n      });\n      busboy.on(\"file\", function(fieldname, file, filename, encoding, mimetype) {\n        // var saveTo = path.join(os.tmpDir(), filename);\n        // var saveTo = path.join(process.cwd()+ \"/tmp/\", filename);\n        // var token = Random.id( 10 );\n        // req.token = token;\n        // var saveTo = path.join(process.env.PWD, \"private\", filename);\n        var fileSizeBytes = 0;\n        var contents = '';\n\n        // file.pipe(fs.createWriteStream(saveTo));\n        // var string = Assets.getText(filename);\n\n        file.on(\"data\", function(data) {\n          fileSizeBytes = fileSizeBytes + data.length;\n          contents += data;\n        });\n\n        file.on('end', function() {\n          // console.log(datas);\n          files.push({\n            fieldname: fieldname,\n            originalFilename: filename,\n            contents : contents,\n            size: fileSizeBytes,\n          });\n        });\n      });\n      busboy.on(\"finish\", function() {\n        // Pass the file on to the request\n        // console.log(files);\n        req.files = files;\n        next();\n      });\n      // Pass request to busboy\n      req.pipe(busboy);\n    } else {\n      next();\n    }\n  });\n}\n\nRouter.route( '/api/v1/event-study', function() {\n\n  this.response.setHeader( 'Access-Control-Allow-Origin', '*' );\n\n  if ( this.request.method === \"OPTIONS\" ) {\n    this.response.setHeader( 'Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept' );\n    this.response.setHeader( 'Access-Control-Allow-Methods', 'POST, PUT, GET, DELETE, OPTIONS' );\n    this.response.end( 'Set OPTIONS.' );\n  } else {\n    API.handleRequest( this, this.request.method);\n  }\n}, { where: 'server' } );\n","import { Meteor } from 'meteor/meteor';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]