{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/server_save_file.js","filenameRelative":"/server/server_save_file.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/server_save_file.js.map","sourceFileName":"/server/server_save_file.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"server_save_file"},"ignored":false,"code":"/**\n* TODO support other encodings:\n* http://stackoverflow.com/questions/7329128/how-to-write-binary-data-to-a-file-using-node-js\n*/\nMeteor.methods({\n   saveFile: function () {\n      function saveFile(blob, name, path, encoding) {\n         var path = cleanPath(path),\n             fs = Npm.require('fs'),\n\n         //var path = cleanPath(path), fs = __meteor_bootstrap__.require('fs'),\n         name = cleanName(name || 'file'),\n             encoding = encoding || 'binary',\n             chroot = Meteor.chroot || 'download/public';\n         // Clean up the path. Remove any initial and final '/' -we prefix them-,\n         // any sort of attempt to go to the parent directory '..' and any empty directories in\n         // between '/////' - which may happen after removing '..'\n         path = chroot + (path ? '/' + path + '/' : '/');\n\n         // TODO Add file existance checks, etc...\n         fs.writeFile(path + name, blob, encoding, function (err) {\n            if (err) {\n               throw new Meteor.Error(500, 'Failed to save file.', err);\n            } else {\n               console.log('The file ' + name + ' (' + encoding + ') was saved to ' + path);\n            }\n         });\n\n         function cleanPath(str) {\n            if (str) {\n               return str.replace(/\\.\\./g, '').replace(/\\/+/g, '').replace(/^\\/+/, '').replace(/\\/+$/, '');\n            }\n         }\n\n         function cleanName(str) {\n            return str.replace(/\\.\\./g, '').replace(/\\//g, '');\n         }\n      }\n\n      return saveFile;\n   }()\n});","ast":null,"map":{"version":3,"sources":["/server/server_save_file.js"],"names":[],"mappings":";;;;AAIA,OAAO,OAAP,CAAe;AACZ;AAAU,wBAAS,IAAT,EAAe,IAAf,EAAqB,IAArB,EAA2B,QAA3B,EAAqC;AAC5C,aAAI,OAAO,UAAU,IAAV,CAAP;aAAwB,KAAK,IAAI,OAAJ,CAAY,IAAZ,CAAL;;;AAEzB,gBAAO,UAAU,QAAQ,MAAR,CAAjB;aAAkC,WAAW,YAAY,QAAZ;aAC7C,SAAS,OAAO,MAAP,IAAiB,iBAAjB;;;;AAJgC,aAQ5C,GAAO,UAAU,OAAO,MAAM,IAAN,GAAa,GAAb,GAAmB,GAA1B,CAAV;;;AARqC,WAW5C,CAAG,SAAH,CAAa,OAAO,IAAP,EAAa,IAA1B,EAAgC,QAAhC,EAA0C,UAAS,GAAT,EAAc;AACrD,gBAAI,GAAJ,EAAS;AACN,qBAAO,IAAI,OAAO,KAAP,CAAa,GAAjB,EAAsB,sBAAtB,EAA8C,GAA9C,CAAP,CADM;aAAT,MAEO;AACJ,uBAAQ,GAAR,CAAY,cAAc,IAAd,GAAqB,IAArB,GAA4B,QAA5B,GAAuC,iBAAvC,GAA2D,IAA3D,CAAZ,CADI;aAFP;UADuC,CAA1C,CAX4C;;AAmB5C,kBAAS,SAAT,CAAmB,GAAnB,EAAwB;AACrB,gBAAI,GAAJ,EAAS;AACN,sBAAO,IAAI,OAAJ,CAAY,OAAZ,EAAoB,EAApB,EAAwB,OAAxB,CAAgC,MAAhC,EAAuC,EAAvC,EACJ,OADI,CACI,MADJ,EACW,EADX,EACe,OADf,CACuB,MADvB,EAC8B,EAD9B,CAAP,CADM;aAAT;UADH;;AAOA,kBAAS,SAAT,CAAmB,GAAnB,EAAwB;AACrB,mBAAO,IAAI,OAAJ,CAAY,OAAZ,EAAoB,EAApB,EAAwB,OAAxB,CAAgC,KAAhC,EAAsC,EAAtC,CAAP,CADqB;UAAxB;OA1BO;;;MAAV;CADH","file":"/server/server_save_file.js.map","sourcesContent":["/**\n* TODO support other encodings:\n* http://stackoverflow.com/questions/7329128/how-to-write-binary-data-to-a-file-using-node-js\n*/\nMeteor.methods({\n   saveFile: function(blob, name, path, encoding) {\n      var path = cleanPath(path), fs = Npm.require('fs'),\n      //var path = cleanPath(path), fs = __meteor_bootstrap__.require('fs'), \n         name = cleanName(name || 'file'), encoding = encoding || 'binary',\n         chroot = Meteor.chroot || 'download/public';\n      // Clean up the path. Remove any initial and final '/' -we prefix them-,\n      // any sort of attempt to go to the parent directory '..' and any empty directories in\n      // between '/////' - which may happen after removing '..'\n      path = chroot + (path ? '/' + path + '/' : '/');\n      \n      // TODO Add file existance checks, etc...\n      fs.writeFile(path + name, blob, encoding, function(err) {\n         if (err) {\n            throw (new Meteor.Error(500, 'Failed to save file.', err));\n         } else {\n            console.log('The file ' + name + ' (' + encoding + ') was saved to ' + path);\n         }\n      });\n\n      function cleanPath(str) {\n         if (str) {\n            return str.replace(/\\.\\./g,'').replace(/\\/+/g,'').\n               replace(/^\\/+/,'').replace(/\\/+$/,'');\n            }\n         }\n\n      function cleanName(str) {\n         return str.replace(/\\.\\./g,'').replace(/\\//g,'');\n      }\n   }\n});\n"]},"hash":"740aff397862bea0a2e7c23f73c20593305ca23c"}
