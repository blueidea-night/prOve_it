{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/client_save_file.js","filenameRelative":"/client/client_save_file.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/client_save_file.js.map","sourceFileName":"/client/client_save_file.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"client_save_file"},"ignored":false,"code":"/**\n* @blob (https://developer.mozilla.org/en-US/docs/DOM/Blob)\n* @name the file's name\n* @type the file's type: binary, text (https://developer.mozilla.org/en-US/docs/DOM/FileReader#Methods)\n*\n* TODO Support other encodings: https://developer.mozilla.org/en-US/docs/DOM/FileReader#Methods\n* ArrayBuffer / DataURL (base64)\n*/\nMeteor.saveFile = function (blob, name, path, type, callback) {\n   var fileReader = new FileReader(),\n       method,\n       encoding = 'binary',\n       type = type || 'binary';\n   switch (type) {\n      case 'text':\n         // TODO Is this needed? If we're uploading content from file, yes, but if it's from an input/textarea I think not...\n         method = 'readAsText';\n         encoding = 'utf8';\n         break;\n      case 'binary':\n         method = 'readAsBinaryString';\n         encoding = 'binary';\n         break;\n      default:\n         method = 'readAsBinaryString';\n         encoding = 'binary';\n         break;\n   }\n   fileReader.onload = function (file) {\n      Meteor.call('saveFile', file.srcElement.result, name, path, encoding, callback);\n   };\n   fileReader[method](blob);\n};","ast":null,"map":{"version":3,"sources":["/client/client_save_file.js"],"names":[],"mappings":";;;;;;;;AAQA,OAAO,QAAP,GAAkB,UAAS,IAAT,EAAe,IAAf,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,QAAjC,EAA2C;AAC1D,OAAI,aAAa,IAAI,UAAJ,EAAb;OACD,MADH;OACW,WAAW,QAAX;OAAqB,OAAO,QAAQ,QAAR,CAFmB;AAG1D,WAAQ,IAAR;AACG,WAAK,MAAL;;AAEG,kBAAS,YAAT,CAFH;AAGG,oBAAW,MAAX,CAHH;AAIG,eAJH;AADH,WAMQ,QAAL;AACG,kBAAS,oBAAT,CADH;AAEG,oBAAW,QAAX,CAFH;AAGG,eAHH;AANH;AAWM,kBAAS,oBAAT,CADH;AAEG,oBAAW,QAAX,CAFH;AAGG,eAHH;AAVH,IAH0D;AAkB1D,cAAW,MAAX,GAAoB,UAAS,IAAT,EAAe;AAChC,aAAO,IAAP,CAAY,UAAZ,EAAwB,KAAK,UAAL,CAAgB,MAAhB,EAAwB,IAAhD,EAAsD,IAAtD,EAA4D,QAA5D,EAAsE,QAAtE,EADgC;IAAf,CAlBsC;AAqB1D,cAAW,MAAX,EAAmB,IAAnB,EArB0D;CAA3C","file":"/client/client_save_file.js.map","sourcesContent":["/**\n* @blob (https://developer.mozilla.org/en-US/docs/DOM/Blob)\n* @name the file's name\n* @type the file's type: binary, text (https://developer.mozilla.org/en-US/docs/DOM/FileReader#Methods)\n*\n* TODO Support other encodings: https://developer.mozilla.org/en-US/docs/DOM/FileReader#Methods\n* ArrayBuffer / DataURL (base64)\n*/\nMeteor.saveFile = function(blob, name, path, type, callback) {\n   var fileReader = new FileReader(),\n      method, encoding = 'binary', type = type || 'binary';\n   switch (type) {\n      case 'text':\n         // TODO Is this needed? If we're uploading content from file, yes, but if it's from an input/textarea I think not...\n         method = 'readAsText';\n         encoding = 'utf8';\n         break;\n      case 'binary':\n         method = 'readAsBinaryString';\n         encoding = 'binary';\n         break;\n      default:\n         method = 'readAsBinaryString';\n         encoding = 'binary';\n         break;\n   }\n   fileReader.onload = function(file) {\n      Meteor.call('saveFile', file.srcElement.result, name, path, encoding, callback);\n   }\n   fileReader[method](blob);\n}\n"]},"hash":"154df6e284bca5ef75494ad6a3b83f8915dec0f8"}
