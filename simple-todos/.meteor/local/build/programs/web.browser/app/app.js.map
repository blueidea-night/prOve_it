{"version":3,"sources":["meteor://ðŸ’»app/client/api2.js","meteor://ðŸ’»app/client/client_example.js","meteor://ðŸ’»app/client/client_save_file.js","meteor://ðŸ’»app/client/main.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,CAAa,MAAb,EAAqB,YAAY;AAC/B,OAAK,MAAL,CAAY,SAAZ,EAD+B;CAAZ,CAArB,wG;;;;;;;;;;;ACAA,SAAS,OAAT,CAAiB,MAAjB,CAAwB;AACtB;AAAgB,yBAAS,EAAT,EAAa;AAC3B,QAAE,IAAF,CAAO,GAAG,aAAH,CAAiB,KAAjB,EAAyB,UAAS,IAAT,EAAe;AAC7C,eAAO,QAAP,CAAgB,IAAhB,EAAsB,KAAK,IAAL,CAAtB,CAD6C;OAAf,CAAhC,CAD2B;KAAb;;;KAAhB;CADF,yG;;;;;;;;;;;;;;;;;;;ACQA,OAAO,QAAP,GAAkB,UAAS,IAAT,EAAe,IAAf,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,QAAjC,EAA2C;AAC1D,OAAI,aAAa,IAAI,UAAJ,EAAb;OACD,MADH;OACW,WAAW,QAAX;OAAqB,OAAO,QAAQ,QAAR,CAFmB;AAG1D,WAAQ,IAAR;AACG,WAAK,MAAL;;AAEG,kBAAS,YAAT,CAFH;AAGG,oBAAW,MAAX,CAHH;AAIG,eAJH;AADH,WAMQ,QAAL;AACG,kBAAS,oBAAT,CADH;AAEG,oBAAW,QAAX,CAFH;AAGG,eAHH;AANH;AAWM,kBAAS,oBAAT,CADH;AAEG,oBAAW,QAAX,CAFH;AAGG,eAHH;AAVH,IAH0D;AAkB1D,cAAW,MAAX,GAAoB,UAAS,IAAT,EAAe;;AAEhC,aAAO,IAAP,CAAY,UAAZ,EAAwB,KAAK,MAAL,CAAY,MAAZ,EAAoB,IAA5C,EAAkD,IAAlD,EAAwD,QAAxD,EAAkE,QAAlE,EAFgC;IAAf,CAlBsC;AAsB1D,cAAW,MAAX,EAAmB,IAAnB,EAtB0D;CAA3C,yG;;;;;;;;;;;ACRlB;;AACA;;AAEA;;AAEA,qBAAS,KAAT,CAAe,SAAf;AAAyB,WAAS,cAAT,GAA0B;;AAEjD,SAAK,OAAL,GAAe,6BAAgB,CAAhB,CAAf,CAFiD;GAA1B;;SAAS;GAAlC;;AAKA,qBAAS,KAAT,CAAe,OAAf,CAAuB;AACrB;uBAAU;AACR,aAAO,qBAAS,QAAT,GAAoB,OAApB,CAA4B,GAA5B,EAAP,CADQ;;;;KADW;CAAvB;;AAMA,qBAAS,KAAT,CAAe,MAAf,CAAsB;AACpB;yBAAe,OAAO,UAAU;;AAE9B,eAAS,OAAT,CAAiB,GAAjB,CAAqB,SAAS,OAAT,CAAiB,GAAjB,KAAyB,CAAzB,CAArB,CAF8B;;;;KADZ;CAAtB,yG","file":"/app.js","sourcesContent":["Router.route('/ex/', function () {\n  this.render('example');\n});","Template.example.events({\n  'change input': function(ev) {  \n    _.each(ev.currentTarget.files , function(file) {\n      Meteor.saveFile(file, file.name);\n    });\n  }\n});","/**\n* @blob (https://developer.mozilla.org/en-US/docs/DOM/Blob)\n* @name the file's name\n* @type the file's type: binary, text (https://developer.mozilla.org/en-US/docs/DOM/FileReader#Methods)\n*\n* TODO Support other encodings: https://developer.mozilla.org/en-US/docs/DOM/FileReader#Methods\n* ArrayBuffer / DataURL (base64)\n*/\nMeteor.saveFile = function(blob, name, path, type, callback) {\n   var fileReader = new FileReader(),\n      method, encoding = 'binary', type = type || 'binary';\n   switch (type) {\n      case 'text':\n         // TODO Is this needed? If we're uploading content from file, yes, but if it's from an input/textarea I think not...\n         method = 'readAsText';\n         encoding = 'utf8';\n         break;\n      case 'binary':\n         method = 'readAsBinaryString';\n         encoding = 'binary';\n         break;\n      default:\n         method = 'readAsBinaryString';\n         encoding = 'binary';\n         break;\n   }\n   fileReader.onload = function(file) {\n      //Meteor.call('saveFile', file.srcElement.result, name, path, encoding, callback);\n      Meteor.call('saveFile', file.target.result, name, path, encoding, callback);\n  }\n   fileReader[method](blob);\n}\n","import { Template } from 'meteor/templating';\nimport { ReactiveVar } from 'meteor/reactive-var';\n\nimport './main.html';\n\nTemplate.hello.onCreated(function helloOnCreated() {\n  // counter starts at 0\n  this.counter = new ReactiveVar(0);\n});\n\nTemplate.hello.helpers({\n  counter() {\n    return Template.instance().counter.get();\n  },\n});\n\nTemplate.hello.events({\n  'click button'(event, instance) {\n    // increment the counter when button is clicked\n    instance.counter.set(instance.counter.get() + 1);\n  },\n});\n"]}