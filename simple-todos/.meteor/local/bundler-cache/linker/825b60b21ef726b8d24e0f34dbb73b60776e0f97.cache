[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"server\":{\"api.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// server/api.js                                                                                                 //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nRouter.route('/', function () {                                                                                  // 1\n  // Two parts here. Oof. So, our friend CORS is fussy. In order to get our                                      //\n  // request through, we need to do two things: let it know that the request                                     //\n  // is allowed from the originating server AND, let it know what options it                                     //\n  // is allowed to send with the request.                                                                        //\n                                                                                                                 //\n  // There are two types of requests happening: OPTIONS and the actual request.                                  //\n  // An OPTIONS request is known as a \"pre-flight\" request. Before the actual                                    //\n  // request is run, it will ask if it is allowed to make the request, AND,                                      //\n  // if the data it's asking to pass over is allowed.                                                            //\n                                                                                                                 //\n  // Setting Access-Control-Allow-Origin answers the first question, by saying                                   //\n  // what domains requests are allowed to be made from (in this case * is equal                                  //\n  // to saying \"anywhere\").                                                                                      //\n  this.response.setHeader('Access-Control-Allow-Origin', '*');                                                   // 15\n                                                                                                                 //\n  // Here, we check the request method to see if it's an OPTIONS request, or,                                    //\n  // a pre-flight check. If it is, we pass along a list of allowed headers and                                   //\n  // methods, followed by an end to that request (the pre-flight). Once this is                                  //\n  // received by the requesting server, it will attempt to perform the actual                                    //\n  // request (GET, POST, PUT, or DELETE).                                                                        //\n  if (this.request.method === \"OPTIONS\") {                                                                       // 1\n    this.response.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');   // 23\n    this.response.setHeader('Access-Control-Allow-Methods', 'POST, PUT, GET, DELETE, OPTIONS');                  // 24\n    this.response.end('Set OPTIONS.');                                                                           // 25\n  } else {                                                                                                       //\n    // If we've already passed through the OPTIONS request, we go ahead and call                                 //\n    // our actual HTTP method.                                                                                   //\n    API.handleRequest(this, this.request.method);                                                                // 29\n  }                                                                                                              //\n}, { where: 'server' });                                                                                         //\n                                                                                                                 //\nAPI = {                                                                                                          // 34\n  connection: function () {                                                                                      // 35\n    function connection(request) {                                                                               // 35\n      var getRequestContents = API.utility.getRequestContents(request);                                          // 36\n      return { data: getRequestContents };                                                                       // 37\n    }                                                                                                            //\n                                                                                                                 //\n    return connection;                                                                                           //\n  }(),                                                                                                           //\n  handleRequest: function () {                                                                                   // 39\n    function handleRequest(context, method) {                                                                    // 39\n      var connection = API.connection(context.request);                                                          // 40\n      if (!connection.error) {                                                                                   // 41\n        API.methods[method](context, connection);                                                                // 42\n      } else {                                                                                                   //\n        API.utility.response(context, 401, connection);                                                          // 44\n      }                                                                                                          //\n    }                                                                                                            //\n                                                                                                                 //\n    return handleRequest;                                                                                        //\n  }(),                                                                                                           //\n  methods: {                                                                                                     // 47\n    // GET: function( context, connection ) {                                                                    //\n    //   // Check to see if our request has any data. If it doesn't, we want to                                  //\n    //   // return all pizzas for the owner. If it does, we want to search for                                   //\n    //   // pizzas matching that query.                                                                          //\n    //   var hasData   = API.utility.hasData( connection.data ),                                                 //\n    //       // the validation does nothing at the moment                                                        //\n    //       validData = API.utility.validate( connection.data, { \"a\": String, \"b\": String });                   //\n                                                                                                                 //\n    //   if ( hasData && validData ) {                                                                           //\n    //     var total = MATH.add(parseInt(connection.data['a']),parseInt(connection.data['b']));                  //\n    //     API.utility.response( context, 200, {                                                                 //\n    //       a: connection.data['a'],                                                                            //\n    //       b: connection.data['b'],                                                                            //\n                                                                                                                 //\n    //       total: total                                                                                        //\n    //     });                                                                                                   //\n    //   } else {                                                                                                //\n    //       API.utility.response( context, 404, { error: 404, message: \"No numbers found, dude.\" } );           //\n    //   }                                                                                                       //\n    // },                                                                                                        //\n    POST: function () {                                                                                          // 69\n      function POST(context, connection) {                                                                       // 69\n        // Make sure that our request has data and that the data is valid.                                       //\n        var hasData = API.utility.hasData(connection.data),                                                      // 71\n                                                                                                                 //\n        // the validation does nothing at the moment                                                             //\n        validData = API.utility.validate(connection.data, { \"a\": String, \"b\": String });                         // 73\n                                                                                                                 //\n        if (hasData && validData) {                                                                              // 75\n          var total = MATH.add(parseInt(connection.data['a']), parseInt(connection.data['b']));                  // 76\n          API.utility.response(context, 200, {                                                                   // 77\n            a: connection.data['a'],                                                                             // 78\n            b: connection.data['b'],                                                                             // 79\n                                                                                                                 //\n            total: total                                                                                         // 81\n          });                                                                                                    //\n        } else {                                                                                                 //\n          API.utility.response(context, 404, { error: 404, message: \"No numbers found, dude.\" });                // 84\n        }                                                                                                        //\n      }                                                                                                          //\n                                                                                                                 //\n      return POST;                                                                                               //\n    }()                                                                                                          //\n  },                                                                                                             //\n  // PUT: function( context, connection ) {                                                                      //\n  //   var hasQuery  = API.utility.hasData( connection.data ),                                                   //\n  //       validData = API.utility.validate( connection.data, Match.OneOf(                                       //\n  //         { \"_id\": String, \"name\": String },                                                                  //\n  //         { \"_id\": String, \"crust\": String },                                                                 //\n  //         { \"_id\": String, \"toppings\": [ String ] },                                                          //\n  //         { \"_id\": String, \"name\": String, \"crust\": String },                                                 //\n  //         { \"_id\": String, \"name\": String, \"toppings\": [ String ] },                                          //\n  //         { \"_id\": String, \"crust\": String, \"toppings\": [ String ] },                                         //\n  //         { \"_id\": String, \"name\": String, \"crust\": String, \"toppings\": [ String ] }                          //\n  //       ));                                                                                                   //\n                                                                                                                 //\n  //   if ( hasQuery && validData ) {                                                                            //\n  //     // Save the ID of the pizza we want to update and then sanatize our                                     //\n  //     // data so that it only includes name, crust, and toppings parameters.                                  //\n  //     var pizzaId = connection.data._id;                                                                      //\n  //     delete connection.data._id;                                                                             //\n                                                                                                                 //\n  //     var getPizza = Pizza.findOne( { \"_id\": pizzaId }, { fields: { \"_id\": 1 } } );                           //\n                                                                                                                 //\n  //     if ( getPizza ) {                                                                                       //\n  //       Pizza.update( { \"_id\": pizzaId }, { $set: connection.data } );                                        //\n  //       API.utility.response( context, 200, { \"message\": \"Pizza successfully updated!\" } );                   //\n  //     } else {                                                                                                //\n  //       API.utility.response( context, 404, { \"message\": \"Can't update a non-existent pizza, homeslice.\" } );\n  //     }                                                                                                       //\n  //   } else {                                                                                                  //\n  //     API.utility.response( context, 403, { error: 403, message: \"PUT calls must have a pizza ID and at least a name, crust, or toppings passed in the request body in the correct formats (String, String, Array).\" } );\n  //   }                                                                                                         //\n  // },                                                                                                          //\n  // DELETE: function( context, connection ) {                                                                   //\n  //   var hasQuery  = API.utility.hasData( connection.data ),                                                   //\n  //       validData = API.utility.validate( connection.data, { \"_id\": String } );                               //\n                                                                                                                 //\n  //   if ( hasQuery && validData ) {                                                                            //\n  //     var pizzaId  = connection.data._id;                                                                     //\n  //     var getPizza = Pizza.findOne( { \"_id\": pizzaId }, { fields: { \"_id\": 1 } } );                           //\n                                                                                                                 //\n  //     if ( getPizza ) {                                                                                       //\n  //       Pizza.remove( { \"_id\": pizzaId } );                                                                   //\n  //       API.utility.response( context, 200, { \"message\": \"Pizza removed!\" } );                                //\n  //     } else {                                                                                                //\n  //       API.utility.response( context, 404, { \"message\": \"Can't delete a non-existent pizza, homeslice.\" } );\n  //     }                                                                                                       //\n  //   } else {                                                                                                  //\n  //     API.utility.response( context, 403, { error: 403, message: \"DELETE calls must have an _id (and only an _id) in the request body in the correct format (String).\" } );\n  //   }                                                                                                         //\n  // }                                                                                                           //\n  utility: {                                                                                                     // 136\n    getRequestContents: function () {                                                                            // 137\n      function getRequestContents(request) {                                                                     // 137\n        return request.query;                                                                                    // 138\n        // switch( request.method ) {                                                                            //\n        //   case \"GET\":                                                                                         //\n        //     return request.query;                                                                             //\n        //   case \"POST\":                                                                                        //\n        //   case \"PUT\":                                                                                         //\n        //   case \"DELETE\":                                                                                      //\n        //     return request.body;                                                                              //\n        // }                                                                                                     //\n      }                                                                                                          // 137\n                                                                                                                 //\n      return getRequestContents;                                                                                 //\n    }(),                                                                                                         //\n    hasData: function () {                                                                                       // 148\n      function hasData(data) {                                                                                   // 148\n        return Object.keys(data).length > 1 ? true : false;                                                      // 149\n        // return true;                                                                                          //\n      }                                                                                                          // 148\n                                                                                                                 //\n      return hasData;                                                                                            //\n    }(),                                                                                                         //\n    response: function () {                                                                                      // 152\n      function response(context, statusCode, data) {                                                             // 152\n        context.response.setHeader('Content-Type', 'application/json');                                          // 153\n        context.response.statusCode = statusCode;                                                                // 154\n        context.response.end(JSON.stringify(data));                                                              // 155\n      }                                                                                                          //\n                                                                                                                 //\n      return response;                                                                                           //\n    }(),                                                                                                         //\n    validate: function () {                                                                                      // 157\n      function validate(data, pattern) {                                                                         // 157\n        return true;                                                                                             // 158\n        return Match.test(data, pattern);                                                                        // 159\n      }                                                                                                          //\n                                                                                                                 //\n      return validate;                                                                                           //\n    }()                                                                                                          //\n  }                                                                                                              //\n};                                                                                                               //\n                                                                                                                 //\nMATH = {                                                                                                         // 164\n  add: function () {                                                                                             // 165\n    function add(a, b) {                                                                                         // 165\n      return a + b;                                                                                              // 166\n    }                                                                                                            //\n                                                                                                                 //\n    return add;                                                                                                  //\n  }()                                                                                                            //\n};                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server_save_file.js\":function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// server/server_save_file.js                                                                                    //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\n/**                                                                                                              //\n* TODO support other encodings:                                                                                  //\n* http://stackoverflow.com/questions/7329128/how-to-write-binary-data-to-a-file-using-node-js                    //\n*/                                                                                                               //\nMeteor.methods({                                                                                                 // 5\n   saveFile: function () {                                                                                       // 6\n      function saveFile(blob, name, path, encoding) {                                                            // 6\n         var path = cleanPath(path),                                                                             // 7\n             fs = __meteor_bootstrap__.require('fs'),                                                            //\n             name = cleanName(name || 'file'),                                                                   //\n             encoding = encoding || 'binary',                                                                    //\n             chroot = Meteor.chroot || 'public';                                                                 //\n         // Clean up the path. Remove any initial and final '/' -we prefix them-,                                //\n         // any sort of attempt to go to the parent directory '..' and any empty directories in                  //\n         // between '/////' - which may happen after removing '..'                                               //\n         path = chroot + (path ? '/' + path + '/' : '/');                                                        // 6\n                                                                                                                 //\n         // TODO Add file existance checks, etc...                                                               //\n         fs.writeFile(path + name, blob, encoding, function (err) {                                              // 6\n            if (err) {                                                                                           // 17\n               throw new Meteor.Error(500, 'Failed to save file.', err);                                         // 18\n            } else {                                                                                             //\n               console.log('The file ' + name + ' (' + encoding + ') was saved to ' + path);                     // 20\n            }                                                                                                    //\n         });                                                                                                     //\n                                                                                                                 //\n         function cleanPath(str) {                                                                               // 24\n            if (str) {                                                                                           // 25\n               return str.replace(/\\.\\./g, '').replace(/\\/+/g, '').replace(/^\\/+/, '').replace(/\\/+$/, '');      // 26\n            }                                                                                                    //\n         }                                                                                                       //\n                                                                                                                 //\n         function cleanName(str) {                                                                               // 31\n            return str.replace(/\\.\\./g, '').replace(/\\//g, '');                                                  // 32\n         }                                                                                                       //\n      }                                                                                                          //\n                                                                                                                 //\n      return saveFile;                                                                                           //\n   }()                                                                                                           //\n});                                                                                                              //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":[\"meteor/meteor\",function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// server/main.js                                                                                                //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nvar _meteor = require('meteor/meteor');                                                                          // 1\n                                                                                                                 //\n_meteor.Meteor.startup(function () {                                                                             // 3\n  // code to run on server at startup                                                                            //\n});                                                                                                              //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./server/api.js\");\nrequire(\"./server/server_save_file.js\");\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/server/api.js","/server/server_save_file.js","/server/main.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["Router.route( '/', function() {\n  // Two parts here. Oof. So, our friend CORS is fussy. In order to get our\n  // request through, we need to do two things: let it know that the request\n  // is allowed from the originating server AND, let it know what options it\n  // is allowed to send with the request.\n\n  // There are two types of requests happening: OPTIONS and the actual request.\n  // An OPTIONS request is known as a \"pre-flight\" request. Before the actual\n  // request is run, it will ask if it is allowed to make the request, AND,\n  // if the data it's asking to pass over is allowed.\n\n  // Setting Access-Control-Allow-Origin answers the first question, by saying\n  // what domains requests are allowed to be made from (in this case * is equal\n  // to saying \"anywhere\").\n  this.response.setHeader( 'Access-Control-Allow-Origin', '*' );\n\n  // Here, we check the request method to see if it's an OPTIONS request, or,\n  // a pre-flight check. If it is, we pass along a list of allowed headers and\n  // methods, followed by an end to that request (the pre-flight). Once this is\n  // received by the requesting server, it will attempt to perform the actual\n  // request (GET, POST, PUT, or DELETE).\n  if ( this.request.method === \"OPTIONS\" ) {\n    this.response.setHeader( 'Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept' );\n    this.response.setHeader( 'Access-Control-Allow-Methods', 'POST, PUT, GET, DELETE, OPTIONS' );\n    this.response.end( 'Set OPTIONS.' );\n  } else {\n    // If we've already passed through the OPTIONS request, we go ahead and call\n    // our actual HTTP method.\n    API.handleRequest( this, this.request.method );\n  }\n}, { where: 'server' } );\n\n\nAPI = {\n  connection: function( request ) {\n    var getRequestContents = API.utility.getRequestContents( request );\n    return { data: getRequestContents };\n  },\n  handleRequest: function( context, method ) {\n    var connection = API.connection( context.request );\n    if ( !connection.error ) {\n      API.methods[ method ]( context, connection );\n    } else {\n      API.utility.response( context, 401, connection );\n    }\n  },\n  methods: {\n    // GET: function( context, connection ) {\n    //   // Check to see if our request has any data. If it doesn't, we want to\n    //   // return all pizzas for the owner. If it does, we want to search for\n    //   // pizzas matching that query.\n    //   var hasData   = API.utility.hasData( connection.data ),\n    //       // the validation does nothing at the moment\n    //       validData = API.utility.validate( connection.data, { \"a\": String, \"b\": String });\n\n\n    //   if ( hasData && validData ) {\n    //     var total = MATH.add(parseInt(connection.data['a']),parseInt(connection.data['b']));\n    //     API.utility.response( context, 200, {\n    //       a: connection.data['a'],\n    //       b: connection.data['b'],\n\n    //       total: total\n    //     });\n    //   } else {\n    //       API.utility.response( context, 404, { error: 404, message: \"No numbers found, dude.\" } );\n    //   }\n    // },\n    POST: function( context, connection ) {\n      // Make sure that our request has data and that the data is valid.\n      var hasData   = API.utility.hasData( connection.data ),\n          // the validation does nothing at the moment\n          validData = API.utility.validate( connection.data, { \"a\": String, \"b\": String });\n\n      if ( hasData && validData ) {\n        var total = MATH.add(parseInt(connection.data['a']),parseInt(connection.data['b']));\n        API.utility.response( context, 200, {\n          a: connection.data['a'],\n          b: connection.data['b'],\n\n          total: total\n        });\n      } else {\n          API.utility.response( context, 404, { error: 404, message: \"No numbers found, dude.\" } );\n      }\n    },\n    // PUT: function( context, connection ) {\n    //   var hasQuery  = API.utility.hasData( connection.data ),\n    //       validData = API.utility.validate( connection.data, Match.OneOf(\n    //         { \"_id\": String, \"name\": String },\n    //         { \"_id\": String, \"crust\": String },\n    //         { \"_id\": String, \"toppings\": [ String ] },\n    //         { \"_id\": String, \"name\": String, \"crust\": String },\n    //         { \"_id\": String, \"name\": String, \"toppings\": [ String ] },\n    //         { \"_id\": String, \"crust\": String, \"toppings\": [ String ] },\n    //         { \"_id\": String, \"name\": String, \"crust\": String, \"toppings\": [ String ] }\n    //       ));\n\n    //   if ( hasQuery && validData ) {\n    //     // Save the ID of the pizza we want to update and then sanatize our\n    //     // data so that it only includes name, crust, and toppings parameters.\n    //     var pizzaId = connection.data._id;\n    //     delete connection.data._id;\n\n    //     var getPizza = Pizza.findOne( { \"_id\": pizzaId }, { fields: { \"_id\": 1 } } );\n\n    //     if ( getPizza ) {\n    //       Pizza.update( { \"_id\": pizzaId }, { $set: connection.data } );\n    //       API.utility.response( context, 200, { \"message\": \"Pizza successfully updated!\" } );\n    //     } else {\n    //       API.utility.response( context, 404, { \"message\": \"Can't update a non-existent pizza, homeslice.\" } );\n    //     }\n    //   } else {\n    //     API.utility.response( context, 403, { error: 403, message: \"PUT calls must have a pizza ID and at least a name, crust, or toppings passed in the request body in the correct formats (String, String, Array).\" } );\n    //   }\n    // },\n    // DELETE: function( context, connection ) {\n    //   var hasQuery  = API.utility.hasData( connection.data ),\n    //       validData = API.utility.validate( connection.data, { \"_id\": String } );\n\n    //   if ( hasQuery && validData ) {\n    //     var pizzaId  = connection.data._id;\n    //     var getPizza = Pizza.findOne( { \"_id\": pizzaId }, { fields: { \"_id\": 1 } } );\n\n    //     if ( getPizza ) {\n    //       Pizza.remove( { \"_id\": pizzaId } );\n    //       API.utility.response( context, 200, { \"message\": \"Pizza removed!\" } );\n    //     } else {\n    //       API.utility.response( context, 404, { \"message\": \"Can't delete a non-existent pizza, homeslice.\" } );\n    //     }\n    //   } else {\n    //     API.utility.response( context, 403, { error: 403, message: \"DELETE calls must have an _id (and only an _id) in the request body in the correct format (String).\" } );\n    //   }\n    // }\n  },\n  utility: {\n    getRequestContents: function( request ) {\n      return request.query;\n      // switch( request.method ) {\n      //   case \"GET\":\n      //     return request.query;\n      //   case \"POST\":\n      //   case \"PUT\":\n      //   case \"DELETE\":\n      //     return request.body;\n      // }\n    },\n    hasData: function( data ) {\n      return Object.keys( data ).length > 1 ? true : false;\n      // return true;\n    },\n    response: function( context, statusCode, data ) {\n      context.response.setHeader( 'Content-Type', 'application/json' );\n      context.response.statusCode = statusCode;\n      context.response.end( JSON.stringify( data ) );\n    },\n    validate: function( data, pattern ) {\n      return true;\n      return Match.test( data, pattern );\n    }\n  }\n};\n\nMATH = {\n  add: function (a, b) {\n    return a+b;\n  }\n}\n","/**\n* TODO support other encodings:\n* http://stackoverflow.com/questions/7329128/how-to-write-binary-data-to-a-file-using-node-js\n*/\nMeteor.methods({\n   saveFile: function(blob, name, path, encoding) {\n      var path = cleanPath(path), fs = __meteor_bootstrap__.require('fs'),\n         name = cleanName(name || 'file'), encoding = encoding || 'binary',\n         chroot = Meteor.chroot || 'public';\n      // Clean up the path. Remove any initial and final '/' -we prefix them-,\n      // any sort of attempt to go to the parent directory '..' and any empty directories in\n      // between '/////' - which may happen after removing '..'\n      path = chroot + (path ? '/' + path + '/' : '/');\n      \n      // TODO Add file existance checks, etc...\n      fs.writeFile(path + name, blob, encoding, function(err) {\n         if (err) {\n            throw (new Meteor.Error(500, 'Failed to save file.', err));\n         } else {\n            console.log('The file ' + name + ' (' + encoding + ') was saved to ' + path);\n         }\n      });\n\n      function cleanPath(str) {\n         if (str) {\n            return str.replace(/\\.\\./g,'').replace(/\\/+/g,'').\n               replace(/^\\/+/,'').replace(/\\/+$/,'');\n            }\n         }\n\n      function cleanName(str) {\n         return str.replace(/\\.\\./g,'').replace(/\\//g,'');\n      }\n   }\n});\n","import { Meteor } from 'meteor/meteor';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]