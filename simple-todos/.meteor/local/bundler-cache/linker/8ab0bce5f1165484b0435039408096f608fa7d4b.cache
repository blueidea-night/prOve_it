[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"server\":{\"server_save_file.js\":function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// server/server_save_file.js                                                                               //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\n/**                                                                                                         //\n* TODO support other encodings:                                                                             //\n* http://stackoverflow.com/questions/7329128/how-to-write-binary-data-to-a-file-using-node-js               //\n*/                                                                                                          //\nMeteor.methods({                                                                                            // 5\n   saveFile: function () {                                                                                  // 6\n      function saveFile(blob, name, path, encoding) {                                                       // 6\n         var path = cleanPath(path),                                                                        // 7\n             fs = __meteor_bootstrap__.require('fs'),                                                       //\n             name = cleanName(name || 'file'),                                                              //\n             encoding = encoding || 'binary',                                                               //\n             chroot = Meteor.chroot || 'public';                                                            //\n         // Clean up the path. Remove any initial and final '/' -we prefix them-,                           //\n         // any sort of attempt to go to the parent directory '..' and any empty directories in             //\n         // between '/////' - which may happen after removing '..'                                          //\n         path = chroot + (path ? '/' + path + '/' : '/');                                                   // 6\n                                                                                                            //\n         // TODO Add file existance checks, etc...                                                          //\n         fs.writeFile(path + name, blob, encoding, function (err) {                                         // 6\n            if (err) {                                                                                      // 17\n               throw new Meteor.Error(500, 'Failed to save file.', err);                                    // 18\n            } else {                                                                                        //\n               console.log('The file ' + name + ' (' + encoding + ') was saved to ' + path);                // 20\n            }                                                                                               //\n         });                                                                                                //\n                                                                                                            //\n         function cleanPath(str) {                                                                          // 24\n            if (str) {                                                                                      // 25\n               return str.replace(/\\.\\./g, '').replace(/\\/+/g, '').replace(/^\\/+/, '').replace(/\\/+$/, '');\n            }                                                                                               //\n         }                                                                                                  //\n                                                                                                            //\n         function cleanName(str) {                                                                          // 31\n            return str.replace(/\\.\\./g, '').replace(/\\//g, '');                                             // 32\n         }                                                                                                  //\n      }                                                                                                     //\n                                                                                                            //\n      return saveFile;                                                                                      //\n   }()                                                                                                      //\n});                                                                                                         //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":[\"meteor/meteor\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// server/main.js                                                                                           //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\nvar _meteor = require('meteor/meteor');                                                                     // 1\n                                                                                                            //\n_meteor.Meteor.startup(function () {                                                                        // 3\n  // code to run on server at startup                                                                       //\n});                                                                                                         //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./server/server_save_file.js\");\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/server/server_save_file.js","/server/main.js"],"names":[],"mappings":";;;;;;;;;;;;AAIA,OAAO,OAAP,CAAe;AACZ;AAAU,wBAAS,IAAT,EAAe,IAAf,EAAqB,IAArB,EAA2B,QAA3B,EAAqC;AAC5C,aAAI,OAAO,UAAU,IAAV,CAAP;aAAwB,KAAK,qBAAqB,OAArB,CAA6B,IAA7B,CAAL;aACzB,OAAO,UAAU,QAAQ,MAAR,CAAjB;aAAkC,WAAW,YAAY,QAAZ;aAC7C,SAAS,OAAO,MAAP,IAAiB,QAAjB;;;;AAHgC,aAO5C,GAAO,UAAU,OAAO,MAAM,IAAN,GAAa,GAAb,GAAmB,GAA1B,CAAV;;;AAPqC,WAU5C,CAAG,SAAH,CAAa,OAAO,IAAP,EAAa,IAA1B,EAAgC,QAAhC,EAA0C,UAAS,GAAT,EAAc;AACrD,gBAAI,GAAJ,EAAS;AACN,qBAAO,IAAI,OAAO,KAAP,CAAa,GAAjB,EAAsB,sBAAtB,EAA8C,GAA9C,CAAP,CADM;aAAT,MAEO;AACJ,uBAAQ,GAAR,CAAY,cAAc,IAAd,GAAqB,IAArB,GAA4B,QAA5B,GAAuC,iBAAvC,GAA2D,IAA3D,CAAZ,CADI;aAFP;UADuC,CAA1C,CAV4C;;AAkB5C,kBAAS,SAAT,CAAmB,GAAnB,EAAwB;AACrB,gBAAI,GAAJ,EAAS;AACN,sBAAO,IAAI,OAAJ,CAAY,OAAZ,EAAoB,EAApB,EAAwB,OAAxB,CAAgC,MAAhC,EAAuC,EAAvC,EACJ,OADI,CACI,MADJ,EACW,EADX,EACe,OADf,CACuB,MADvB,EAC8B,EAD9B,CAAP,CADM;aAAT;UADH;;AAOA,kBAAS,SAAT,CAAmB,GAAnB,EAAwB;AACrB,mBAAO,IAAI,OAAJ,CAAY,OAAZ,EAAoB,EAApB,EAAwB,OAAxB,CAAgC,KAAhC,EAAsC,EAAtC,CAAP,CADqB;UAAxB;OAzBO;;;MAAV;CADH,6G;;;;;;;;;;;ACJA;;AAEA,eAAO,OAAP,CAAe,YAAM;;CAAN,CAAf,4G","file":"/app.js","sourcesContent":["/**\n* TODO support other encodings:\n* http://stackoverflow.com/questions/7329128/how-to-write-binary-data-to-a-file-using-node-js\n*/\nMeteor.methods({\n   saveFile: function(blob, name, path, encoding) {\n      var path = cleanPath(path), fs = __meteor_bootstrap__.require('fs'),\n         name = cleanName(name || 'file'), encoding = encoding || 'binary',\n         chroot = Meteor.chroot || 'public';\n      // Clean up the path. Remove any initial and final '/' -we prefix them-,\n      // any sort of attempt to go to the parent directory '..' and any empty directories in\n      // between '/////' - which may happen after removing '..'\n      path = chroot + (path ? '/' + path + '/' : '/');\n      \n      // TODO Add file existance checks, etc...\n      fs.writeFile(path + name, blob, encoding, function(err) {\n         if (err) {\n            throw (new Meteor.Error(500, 'Failed to save file.', err));\n         } else {\n            console.log('The file ' + name + ' (' + encoding + ') was saved to ' + path);\n         }\n      });\n\n      function cleanPath(str) {\n         if (str) {\n            return str.replace(/\\.\\./g,'').replace(/\\/+/g,'').\n               replace(/^\\/+/,'').replace(/\\/+$/,'');\n            }\n         }\n\n      function cleanName(str) {\n         return str.replace(/\\.\\./g,'').replace(/\\//g,'');\n      }\n   }\n});\n","import { Meteor } from 'meteor/meteor';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]