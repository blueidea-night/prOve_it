[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"server\":{\"server_save_file.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// server/server_save_file.js                                                                          //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\n/**                                                                                                    //\n* TODO support other encodings:                                                                        //\n* http://stackoverflow.com/questions/7329128/how-to-write-binary-data-to-a-file-using-node-js          //\n*/                                                                                                     //\nMeteor.methods({                                                                                       // 5\n  saveFile: function () {                                                                              // 6\n    function saveFile(blob, name, path, encoding) {                                                    // 6\n      var path = cleanPath(path),                                                                      // 7\n          fs = __meteor_bootstrap__.require('fs'),                                                     //\n          name = cleanName(name || 'file'),                                                            //\n          encoding = encoding || 'binary',                                                             //\n          chroot = Meteor.chroot || 'public';                                                          //\n      // Clean up the path. Remove any initial and final '/' -we prefix them-,                         //\n      // any sort of attempt to go to the parent directory '..' and any empty directories in           //\n      // between '/////' - which may happen after removing '..'                                        //\n      path = chroot + (path ? '/' + path + '/' : '/');                                                 // 6\n      // TODO Add file existance checks, etc...                                                        //\n      fs.writeFile(path + name, blob, encoding, function (err) {                                       // 6\n        if (err) {                                                                                     // 16\n          throw new Meteor.Error(500, 'Failed to save file.', err);                                    // 17\n        } else {                                                                                       //\n          console.log('The file ' + name + ' (' + encoding + ') was saved to ' + path);                // 19\n        }                                                                                              //\n      });                                                                                              //\n      function cleanPath(str) {                                                                        // 22\n        if (str) {                                                                                     // 23\n          return str.replace(/\\.\\./g, '').replace(/\\/+/g, '').replace(/^\\/+/, '').replace(/\\/+$/, '');\n        }                                                                                              //\n      }                                                                                                //\n      function cleanName(str) {                                                                        // 28\n        return str.replace(/\\.\\./g, '').replace(/\\//g, '');                                            // 29\n      }                                                                                                //\n    }                                                                                                  //\n                                                                                                       //\n    return saveFile;                                                                                   //\n  }()                                                                                                  //\n});                                                                                                    //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":[\"meteor/meteor\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// server/main.js                                                                                      //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nvar _meteor = require('meteor/meteor');                                                                // 1\n                                                                                                       //\n_meteor.Meteor.startup(function () {                                                                   // 3\n  // code to run on server at startup                                                                  //\n});                                                                                                    //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./server/server_save_file.js\");\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/server/server_save_file.js","/server/main.js"],"names":[],"mappings":";;;;;;;;;;;;AAIA,OAAO,OAAP,CAAe;AACf;AAAU,sBAAS,IAAT,EAAe,IAAf,EAAqB,IAArB,EAA2B,QAA3B,EAAqC;AAC/C,UAAI,OAAO,UAAU,IAAV,CAAP;UAAwB,KAAK,qBAAqB,OAArB,CAA6B,IAA7B,CAAL;UAC5B,OAAO,UAAU,QAAQ,MAAR,CAAjB;UAAkC,WAAW,YAAY,QAAZ;UAC7C,SAAS,OAAO,MAAP,IAAiB,QAAjB;;;;AAHsC,UAO/C,GAAO,UAAU,OAAO,MAAM,IAAN,GAAa,GAAb,GAAmB,GAA1B,CAAV;;AAPwC,QAS/C,CAAG,SAAH,CAAa,OAAO,IAAP,EAAa,IAA1B,EAAgC,QAAhC,EAA0C,UAAS,GAAT,EAAc;AACxD,YAAI,GAAJ,EAAS;AACT,gBAAO,IAAI,OAAO,KAAP,CAAa,GAAjB,EAAsB,sBAAtB,EAA8C,GAA9C,CAAP,CADS;SAAT,MAEO;AACP,kBAAQ,GAAR,CAAY,cAAc,IAAd,GAAqB,IAArB,GAA4B,QAA5B,GAAuC,iBAAvC,GAA2D,IAA3D,CAAZ,CADO;SAFP;OAD0C,CAA1C,CAT+C;AAgB/C,eAAS,SAAT,CAAmB,GAAnB,EAAwB;AACxB,YAAI,GAAJ,EAAS;AACT,iBAAO,IAAI,OAAJ,CAAY,OAAZ,EAAoB,EAApB,EAAwB,OAAxB,CAAgC,MAAhC,EAAuC,EAAvC,EACP,OADO,CACC,MADD,EACQ,EADR,EACY,OADZ,CACoB,MADpB,EAC2B,EAD3B,CAAP,CADS;SAAT;OADA;AAMA,eAAS,SAAT,CAAmB,GAAnB,EAAwB;AACxB,eAAO,IAAI,OAAJ,CAAY,OAAZ,EAAoB,EAApB,EAAwB,OAAxB,CAAgC,KAAhC,EAAsC,EAAtC,CAAP,CADwB;OAAxB;KAtBU;;;KAAV;CADA,wG;;;;;;;;;;;ACJA;;AAEA,eAAO,OAAP,CAAe,YAAM;;CAAN,CAAf,uG","file":"/app.js","sourcesContent":["/**\n* TODO support other encodings:\n* http://stackoverflow.com/questions/7329128/how-to-write-binary-data-to-a-file-using-node-js\n*/\nMeteor.methods({\nsaveFile: function(blob, name, path, encoding) {\nvar path = cleanPath(path), fs = __meteor_bootstrap__.require('fs'),\nname = cleanName(name || 'file'), encoding = encoding || 'binary',\nchroot = Meteor.chroot || 'public';\n// Clean up the path. Remove any initial and final '/' -we prefix them-,\n// any sort of attempt to go to the parent directory '..' and any empty directories in\n// between '/////' - which may happen after removing '..'\npath = chroot + (path ? '/' + path + '/' : '/');\n// TODO Add file existance checks, etc...\nfs.writeFile(path + name, blob, encoding, function(err) {\nif (err) {\nthrow (new Meteor.Error(500, 'Failed to save file.', err));\n} else {\nconsole.log('The file ' + name + ' (' + encoding + ') was saved to ' + path);\n}\n});\nfunction cleanPath(str) {\nif (str) {\nreturn str.replace(/\\.\\./g,'').replace(/\\/+/g,'').\nreplace(/^\\/+/,'').replace(/\\/+$/,'');\n}\n}\nfunction cleanName(str) {\nreturn str.replace(/\\.\\./g,'').replace(/\\//g,'');\n}\n}\n});\n","import { Meteor } from 'meteor/meteor';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]