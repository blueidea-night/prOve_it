[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"server\":{\"api.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// server/api.js                                                                                               //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\nRouter.route('/', function () {                                                                                // 1\n  // Two parts here. Oof. So, our friend CORS is fussy. In order to get our                                    //\n  // request through, we need to do two things: let it know that the request                                   //\n  // is allowed from the originating server AND, let it know what options it                                   //\n  // is allowed to send with the request.                                                                      //\n                                                                                                               //\n  // There are two types of requests happening: OPTIONS and the actual request.                                //\n  // An OPTIONS request is known as a \"pre-flight\" request. Before the actual                                  //\n  // request is run, it will ask if it is allowed to make the request, AND,                                    //\n  // if the data it's asking to pass over is allowed.                                                          //\n                                                                                                               //\n  // Setting Access-Control-Allow-Origin answers the first question, by saying                                 //\n  // what domains requests are allowed to be made from (in this case * is equal                                //\n  // to saying \"anywhere\").                                                                                    //\n  this.response.setHeader('Access-Control-Allow-Origin', '*');                                                 // 15\n                                                                                                               //\n  // Here, we check the request method to see if it's an OPTIONS request, or,                                  //\n  // a pre-flight check. If it is, we pass along a list of allowed headers and                                 //\n  // methods, followed by an end to that request (the pre-flight). Once this is                                //\n  // received by the requesting server, it will attempt to perform the actual                                  //\n  // request (GET, POST, PUT, or DELETE).                                                                      //\n  if (this.request.method === \"OPTIONS\") {                                                                     // 1\n    this.response.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n    this.response.setHeader('Access-Control-Allow-Methods', 'POST, PUT, GET, DELETE, OPTIONS');                // 24\n    this.response.end('Set OPTIONS.');                                                                         // 25\n  } else {                                                                                                     //\n    // If we've already passed through the OPTIONS request, we go ahead and call                               //\n    // our actual HTTP method.                                                                                 //\n    API.handleRequest(this, this.request.method);                                                              // 29\n  }                                                                                                            //\n}, { where: 'server' });                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server_save_file.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// server/server_save_file.js                                                                                  //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n/**                                                                                                            //\n* TODO support other encodings:                                                                                //\n* http://stackoverflow.com/questions/7329128/how-to-write-binary-data-to-a-file-using-node-js                  //\n*/                                                                                                             //\nMeteor.methods({                                                                                               // 5\n   saveFile: function () {                                                                                     // 6\n      function saveFile(blob, name, path, encoding) {                                                          // 6\n         var path = cleanPath(path),                                                                           // 7\n             fs = __meteor_bootstrap__.require('fs'),                                                          //\n             name = cleanName(name || 'file'),                                                                 //\n             encoding = encoding || 'binary',                                                                  //\n             chroot = Meteor.chroot || 'public';                                                               //\n         // Clean up the path. Remove any initial and final '/' -we prefix them-,                              //\n         // any sort of attempt to go to the parent directory '..' and any empty directories in                //\n         // between '/////' - which may happen after removing '..'                                             //\n         path = chroot + (path ? '/' + path + '/' : '/');                                                      // 6\n                                                                                                               //\n         // TODO Add file existance checks, etc...                                                             //\n         fs.writeFile(path + name, blob, encoding, function (err) {                                            // 6\n            if (err) {                                                                                         // 17\n               throw new Meteor.Error(500, 'Failed to save file.', err);                                       // 18\n            } else {                                                                                           //\n               console.log('The file ' + name + ' (' + encoding + ') was saved to ' + path);                   // 20\n            }                                                                                                  //\n         });                                                                                                   //\n                                                                                                               //\n         function cleanPath(str) {                                                                             // 24\n            if (str) {                                                                                         // 25\n               return str.replace(/\\.\\./g, '').replace(/\\/+/g, '').replace(/^\\/+/, '').replace(/\\/+$/, '');    // 26\n            }                                                                                                  //\n         }                                                                                                     //\n                                                                                                               //\n         function cleanName(str) {                                                                             // 31\n            return str.replace(/\\.\\./g, '').replace(/\\//g, '');                                                // 32\n         }                                                                                                     //\n      }                                                                                                        //\n                                                                                                               //\n      return saveFile;                                                                                         //\n   }()                                                                                                         //\n});                                                                                                            //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":[\"meteor/meteor\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// server/main.js                                                                                              //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\nvar _meteor = require('meteor/meteor');                                                                        // 1\n                                                                                                               //\n_meteor.Meteor.startup(function () {                                                                           // 3\n  // code to run on server at startup                                                                          //\n});                                                                                                            //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./server/api.js\");\nrequire(\"./server/server_save_file.js\");\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/server/api.js","/server/server_save_file.js","/server/main.js"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,KAAP,CAAc,GAAd,EAAmB,YAAW;;;;;;;;;;;;;;AAc5B,OAAK,QAAL,CAAc,SAAd,CAAyB,6BAAzB,EAAwD,GAAxD;;;;;;;AAd4B,MAqBvB,KAAK,OAAL,CAAa,MAAb,KAAwB,SAAxB,EAAoC;AACvC,SAAK,QAAL,CAAc,SAAd,CAAyB,8BAAzB,EAAyD,gDAAzD,EADuC;AAEvC,SAAK,QAAL,CAAc,SAAd,CAAyB,8BAAzB,EAAyD,iCAAzD,EAFuC;AAGvC,SAAK,QAAL,CAAc,GAAd,CAAmB,cAAnB,EAHuC;GAAzC,MAIO;;;AAGL,QAAI,aAAJ,CAAmB,IAAnB,EAAyB,KAAK,OAAL,CAAa,MAAb,CAAzB,CAHK;GAJP;CArBiB,EA8BhB,EAAE,OAAO,QAAP,EA9BL,2F;;;;;;;;;;;;;;;ACIA,OAAO,OAAP,CAAe;AACZ;AAAU,wBAAS,IAAT,EAAe,IAAf,EAAqB,IAArB,EAA2B,QAA3B,EAAqC;AAC5C,aAAI,OAAO,UAAU,IAAV,CAAP;aAAwB,KAAK,qBAAqB,OAArB,CAA6B,IAA7B,CAAL;aACzB,OAAO,UAAU,QAAQ,MAAR,CAAjB;aAAkC,WAAW,YAAY,QAAZ;aAC7C,SAAS,OAAO,MAAP,IAAiB,QAAjB;;;;AAHgC,aAO5C,GAAO,UAAU,OAAO,MAAM,IAAN,GAAa,GAAb,GAAmB,GAA1B,CAAV;;;AAPqC,WAU5C,CAAG,SAAH,CAAa,OAAO,IAAP,EAAa,IAA1B,EAAgC,QAAhC,EAA0C,UAAS,GAAT,EAAc;AACrD,gBAAI,GAAJ,EAAS;AACN,qBAAO,IAAI,OAAO,KAAP,CAAa,GAAjB,EAAsB,sBAAtB,EAA8C,GAA9C,CAAP,CADM;aAAT,MAEO;AACJ,uBAAQ,GAAR,CAAY,cAAc,IAAd,GAAqB,IAArB,GAA4B,QAA5B,GAAuC,iBAAvC,GAA2D,IAA3D,CAAZ,CADI;aAFP;UADuC,CAA1C,CAV4C;;AAkB5C,kBAAS,SAAT,CAAmB,GAAnB,EAAwB;AACrB,gBAAI,GAAJ,EAAS;AACN,sBAAO,IAAI,OAAJ,CAAY,OAAZ,EAAoB,EAApB,EAAwB,OAAxB,CAAgC,MAAhC,EAAuC,EAAvC,EACJ,OADI,CACI,MADJ,EACW,EADX,EACe,OADf,CACuB,MADvB,EAC8B,EAD9B,CAAP,CADM;aAAT;UADH;;AAOA,kBAAS,SAAT,CAAmB,GAAnB,EAAwB;AACrB,mBAAO,IAAI,OAAJ,CAAY,OAAZ,EAAoB,EAApB,EAAwB,OAAxB,CAAgC,KAAhC,EAAsC,EAAtC,CAAP,CADqB;UAAxB;OAzBO;;;MAAV;CADH,gH;;;;;;;;;;;ACJA;;AAEA,eAAO,OAAP,CAAe,YAAM;;CAAN,CAAf,+G","file":"/app.js","sourcesContent":["Router.route( '/', function() {\n  // Two parts here. Oof. So, our friend CORS is fussy. In order to get our\n  // request through, we need to do two things: let it know that the request\n  // is allowed from the originating server AND, let it know what options it\n  // is allowed to send with the request.\n\n  // There are two types of requests happening: OPTIONS and the actual request.\n  // An OPTIONS request is known as a \"pre-flight\" request. Before the actual\n  // request is run, it will ask if it is allowed to make the request, AND,\n  // if the data it's asking to pass over is allowed.\n\n  // Setting Access-Control-Allow-Origin answers the first question, by saying\n  // what domains requests are allowed to be made from (in this case * is equal\n  // to saying \"anywhere\").\n  this.response.setHeader( 'Access-Control-Allow-Origin', '*' );\n\n  // Here, we check the request method to see if it's an OPTIONS request, or,\n  // a pre-flight check. If it is, we pass along a list of allowed headers and\n  // methods, followed by an end to that request (the pre-flight). Once this is\n  // received by the requesting server, it will attempt to perform the actual\n  // request (GET, POST, PUT, or DELETE).\n  if ( this.request.method === \"OPTIONS\" ) {\n    this.response.setHeader( 'Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept' );\n    this.response.setHeader( 'Access-Control-Allow-Methods', 'POST, PUT, GET, DELETE, OPTIONS' );\n    this.response.end( 'Set OPTIONS.' );\n  } else {\n    // If we've already passed through the OPTIONS request, we go ahead and call\n    // our actual HTTP method.\n    API.handleRequest( this, this.request.method );\n  }\n}, { where: 'server' } );\n\n\n","/**\n* TODO support other encodings:\n* http://stackoverflow.com/questions/7329128/how-to-write-binary-data-to-a-file-using-node-js\n*/\nMeteor.methods({\n   saveFile: function(blob, name, path, encoding) {\n      var path = cleanPath(path), fs = __meteor_bootstrap__.require('fs'),\n         name = cleanName(name || 'file'), encoding = encoding || 'binary',\n         chroot = Meteor.chroot || 'public';\n      // Clean up the path. Remove any initial and final '/' -we prefix them-,\n      // any sort of attempt to go to the parent directory '..' and any empty directories in\n      // between '/////' - which may happen after removing '..'\n      path = chroot + (path ? '/' + path + '/' : '/');\n      \n      // TODO Add file existance checks, etc...\n      fs.writeFile(path + name, blob, encoding, function(err) {\n         if (err) {\n            throw (new Meteor.Error(500, 'Failed to save file.', err));\n         } else {\n            console.log('The file ' + name + ' (' + encoding + ') was saved to ' + path);\n         }\n      });\n\n      function cleanPath(str) {\n         if (str) {\n            return str.replace(/\\.\\./g,'').replace(/\\/+/g,'').\n               replace(/^\\/+/,'').replace(/\\/+$/,'');\n            }\n         }\n\n      function cleanName(str) {\n         return str.replace(/\\.\\./g,'').replace(/\\//g,'');\n      }\n   }\n});\n","import { Meteor } from 'meteor/meteor';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]